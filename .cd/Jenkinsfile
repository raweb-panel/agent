pipeline {
  agent {
    dockerContainer {
      image 'theraw/jenkins-go-debian12:1.24.5'
    }
  }

  environment {
    GITHUB_TOKEN = credentials('github-token')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'git fetch --tags'
      }
    }

    stage('Bump Version') {
      steps {
        script {
          // Get latest tag or fallback to v1.0.0
          def latestTag = sh(returnStdout: true, script: """
            git tag --sort=version:refname | tail -n1
          """).trim()
          if (!latestTag) {
            latestTag = "v1.0.0"
          }
          echo "Latest tag: ${latestTag}"

          // Increment patch version
          def parts = latestTag.replaceFirst('^v','').split('\\.')
          def nextTag = "v${parts[0]}.${parts[1]}.${(parts[2].toInteger()+1)}"
          def versionOnly = nextTag.replaceFirst('^v','')
          echo "Next tag: ${nextTag}"
          echo "Version: ${versionOnly}"
          env.NEXT_TAG = nextTag
          env.VERSION = versionOnly
        }
      }
    }

    stage('Build') {
      steps {
        sh 'go build -o agent run.go'
        sh 'tar -czf agent.tar.gz agent config.json'
      }
    }

    stage('Create Multi-OS Packages') {
      parallel {
        stage('Debian 12 (Bookworm)') {
          steps {
            script {
              createDebPackage('debian12', 'bookworm', '12')
            }
          }
        }
        stage('Debian 11 (Bullseye)') {
          steps {
            script {
              createDebPackage('debian11', 'bullseye', '11')
            }
          }
        }
        stage('Ubuntu 24.04 (Noble)') {
          steps {
            script {
              createDebPackage('ubuntu2404', 'noble', '24.04')
            }
          }
        }
        stage('Ubuntu 22.04 (Jammy)') {
          steps {
            script {
              createDebPackage('ubuntu2204', 'jammy', '22.04')
            }
          }
        }
        stage('AlmaLinux 9') {
          steps {
            script {
              createRpmPackage('alma9', 'AlmaLinux', '9')
            }
          }
        }
        stage('AlmaLinux 8') {
          steps {
            script {
              createRpmPackage('alma8', 'AlmaLinux', '8')
            }
          }
        }
      }
    }

    stage('Tag & Push') {
      steps {
        sh '''
        git config user.name "jenkins"
        git config user.email "cd@julio.al"
        git remote set-url origin https://$GITHUB_TOKEN@github.com/raweb-panel/agent.git
        git tag $NEXT_TAG
        git push origin $NEXT_TAG
        '''
      }
    }

    stage('Release to GitHub') {
      steps {
        sh '''
        gh release create $NEXT_TAG agent.tar.gz \
            raweb-agent_${VERSION}_debian12_amd64.deb \
            raweb-agent_${VERSION}_debian11_amd64.deb \
            raweb-agent_${VERSION}_ubuntu2404_amd64.deb \
            raweb-agent_${VERSION}_ubuntu2204_amd64.deb \
            raweb-agent-${VERSION}-1.alma9.x86_64.rpm \
            raweb-agent-${VERSION}-1.alma8.x86_64.rpm \
            --repo raweb-panel/agent \
            --title "$NEXT_TAG" \
            --notes "Automated release: $NEXT_TAG"
        '''
      }
    }

    stage('Upload Packages to Repository') {
      parallel {
        stage('Upload Debian 12') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent_${VERSION}_debian12_amd64.deb" \
              -F "distribution=debian12" \
              https://repo.julio.al/upload/deb
            '''
          }
        }
        stage('Upload Debian 11') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent_${VERSION}_debian11_amd64.deb" \
              -F "distribution=debian11" \
              https://repo.julio.al/upload/deb
            '''
          }
        }
        stage('Upload Ubuntu 24.04') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent_${VERSION}_ubuntu2404_amd64.deb" \
              -F "distribution=ubuntu2404" \
              https://repo.julio.al/upload/deb
            '''
          }
        }
        stage('Upload Ubuntu 22.04') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent_${VERSION}_ubuntu2204_amd64.deb" \
              -F "distribution=ubuntu2204" \
              https://repo.julio.al/upload/deb
            '''
          }
        }
        stage('Upload AlmaLinux 9') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent-${VERSION}-1.alma9.x86_64.rpm" \
              -F "distribution=alma9" \
              https://repo.julio.al/upload/rpm
            '''
          }
        }
        stage('Upload AlmaLinux 8') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent-${VERSION}-1.alma8.x86_64.rpm" \
              -F "distribution=alma8" \
              https://repo.julio.al/upload/rpm
            '''
          }
        }
      }
    }
  }

  post {
    always {
      // Clean up
      sh 'rm -rf deb-package-* rpm-package-* rpmbuild'
    }
    success {
      echo "Build completed successfully!"
      echo "DEB packages uploaded to https://repo.julio.al/upload/deb"
      echo "RPM packages uploaded to https://repo.julio.al/upload/rpm"
    }
    failure {
      echo "Build failed!"
    }
  }
}

def createDebPackage(distId, distName, distVersion) {
  sh """
  # Create package directory structure
  mkdir -p deb-package-${distId}/raweb-agent/DEBIAN
  mkdir -p deb-package-${distId}/raweb-agent/raweb/apps/agent
  mkdir -p deb-package-${distId}/raweb-agent/etc/systemd/system

  # Copy binary and config
  cp agent deb-package-${distId}/raweb-agent/raweb/apps/agent/
  cp config.json deb-package-${distId}/raweb-agent/raweb/apps/agent/

  # Make binary executable
  chmod +x deb-package-${distId}/raweb-agent/raweb/apps/agent/agent

  # Create systemd service file
  cat > deb-package-${distId}/raweb-agent/etc/systemd/system/raweb-agent.service << 'EOF'
[Unit]
Description=Raweb Panel Agent
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/raweb/apps/agent
ExecStart=/raweb/apps/agent/agent --config=/raweb/apps/agent/config.json
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

  # Create control file with distribution-specific info
  cat > deb-package-${distId}/raweb-agent/DEBIAN/control << EOF
Package: raweb-agent
Version: ${VERSION}
Section: utils
Priority: optional
Architecture: amd64
Maintainer: Raweb Panel <cd@julio.al>
Description: Raweb Panel Agent (${distName} ${distVersion})
 Agent for Raweb Panel management system
 Built for ${distName} ${distVersion}
EOF

  # Create postinst script
  cat > deb-package-${distId}/raweb-agent/DEBIAN/postinst << 'EOF'
#!/bin/bash
set -e

# Reload systemd and enable service
systemctl daemon-reload
systemctl enable raweb-agent.service

# Start service if not running
if ! systemctl is-active --quiet raweb-agent.service; then
    systemctl start raweb-agent.service
fi

echo "Raweb Agent installed and started successfully"
EOF

  # Create prerm script
  cat > deb-package-${distId}/raweb-agent/DEBIAN/prerm << 'EOF'
#!/bin/bash
set -e

# Stop and disable service before removal
if systemctl is-active --quiet raweb-agent.service; then
    systemctl stop raweb-agent.service
fi

if systemctl is-enabled --quiet raweb-agent.service; then
    systemctl disable raweb-agent.service
fi
EOF

  # Create postrm script
  cat > deb-package-${distId}/raweb-agent/DEBIAN/postrm << 'EOF'
#!/bin/bash
set -e

# Reload systemd after removal
systemctl daemon-reload

# Remove application directory if empty
if [ -d "/raweb/apps/agent" ] && [ -z "\$(ls -A /raweb/apps/agent)" ]; then
    rmdir /raweb/apps/agent
fi

if [ -d "/raweb/apps" ] && [ -z "\$(ls -A /raweb/apps)" ]; then
    rmdir /raweb/apps
fi

echo "Raweb Agent removed successfully"
EOF

  # Make scripts executable
  chmod +x deb-package-${distId}/raweb-agent/DEBIAN/postinst
  chmod +x deb-package-${distId}/raweb-agent/DEBIAN/prerm
  chmod +x deb-package-${distId}/raweb-agent/DEBIAN/postrm

  # Build the package
  dpkg-deb --build deb-package-${distId}/raweb-agent
  mv deb-package-${distId}/raweb-agent.deb raweb-agent_${VERSION}_${distId}_amd64.deb
  """
}

def createRpmPackage(distId, distName, distVersion) {
  sh """
  # Create RPM build directory structure explicitly
  mkdir -p rpmbuild/BUILD
  mkdir -p rpmbuild/BUILDROOT
  mkdir -p rpmbuild/RPMS
  mkdir -p rpmbuild/SOURCES
  mkdir -p rpmbuild/SPECS
  mkdir -p rpmbuild/SRPMS

  # Create spec file
  cat > rpmbuild/SPECS/raweb-agent.spec << 'EOF'
Name:           raweb-agent
Version:        ${VERSION}
Release:        1.${distId}
Summary:        Raweb Panel Agent
License:        Custom
URL:            https://github.com/raweb-panel/agent
BuildArch:      x86_64
Requires:       systemd

%description
Agent for Raweb Panel management system
Built for ${distName} ${distVersion}

%prep
# No preparation needed

%build
# No build needed

%install
mkdir -p %{buildroot}/raweb/apps/agent
mkdir -p %{buildroot}/etc/systemd/system

# Copy binary and config
cp %{_sourcedir}/agent %{buildroot}/raweb/apps/agent/
cp %{_sourcedir}/config.json %{buildroot}/raweb/apps/agent/

# Create systemd service file
cat > %{buildroot}/etc/systemd/system/raweb-agent.service << 'SERVICE'
[Unit]
Description=Raweb Panel Agent
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/raweb/apps/agent
ExecStart=/raweb/apps/agent/agent --config=/raweb/apps/agent/config.json
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
SERVICE

%files
/raweb/apps/agent/agent
/raweb/apps/agent/config.json
/etc/systemd/system/raweb-agent.service

%post
systemctl daemon-reload
systemctl enable raweb-agent.service
if ! systemctl is-active --quiet raweb-agent.service; then
    systemctl start raweb-agent.service
fi
echo "Raweb Agent installed and started successfully"

%preun
if systemctl is-active --quiet raweb-agent.service; then
    systemctl stop raweb-agent.service
fi
if systemctl is-enabled --quiet raweb-agent.service; then
    systemctl disable raweb-agent.service
fi

%postun
systemctl daemon-reload
if [ -d "/raweb/apps/agent" ] && [ -z "\$(ls -A /raweb/apps/agent)" ]; then
    rmdir /raweb/apps/agent
fi
if [ -d "/raweb/apps" ] && [ -z "\$(ls -A /raweb/apps)" ]; then
    rmdir /raweb/apps
fi
echo "Raweb Agent removed successfully"

%changelog
* \$(date "+%a %b %d %Y") Jenkins <cd@julio.al> - ${VERSION}-1.${distId}
- Automated build for ${distName} ${distVersion}
EOF

  # Copy source files
  cp agent rpmbuild/SOURCES/
  cp config.json rpmbuild/SOURCES/

  # Build RPM
  rpmbuild --define "_topdir \$(pwd)/rpmbuild" -ba rpmbuild/SPECS/raweb-agent.spec

  # Move the built RPM to the workspace
  mv rpmbuild/RPMS/x86_64/raweb-agent-${VERSION}-1.${distId}.x86_64.rpm .
  """
}

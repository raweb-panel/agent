pipeline {
  agent {
    dockerContainer {
      image 'theraw/jenkins-go-debian12:1.23.10'
    }
  }

  environment {
    GITHUB_TOKEN = credentials('github-token')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'git fetch --tags'
      }
    }

    stage('Bump Version') {
      steps {
        script {
          // Get latest tag or fallback to v1.0.0
          def latestTag = sh(returnStdout: true, script: """
            git tag --sort=version:refname | tail -n1
          """).trim()
          if (!latestTag) {
            latestTag = "v1.0.0"
          }
          echo "Latest tag: ${latestTag}"

          // Increment patch version
          def parts = latestTag.replaceFirst('^v','').split('\\.')
          def nextTag = "v${parts[0]}.${parts[1]}.${(parts[2].toInteger()+1)}"
          def versionOnly = nextTag.replaceFirst('^v','')
          echo "Next tag: ${nextTag}"
          echo "Version: ${versionOnly}"
          env.NEXT_TAG = nextTag
          env.VERSION = versionOnly
        }
      }
    }

    stage('Build') {
      steps {
        sh 'go build -o agent run.go'
        sh 'tar -czf agent.tar.gz agent config.json'
      }
    }

    stage('Create Multi-OS DEB Packages') {
      parallel {
        stage('Debian 12 (Bookworm)') {
          steps {
            script {
              createDebPackage('debian12', 'bookworm', '12')
            }
          }
        }
        stage('Debian 11 (Bullseye)') {
          steps {
            script {
              createDebPackage('debian11', 'bullseye', '11')
            }
          }
        }
        stage('Ubuntu 24.04 (Noble)') {
          steps {
            script {
              createDebPackage('ubuntu2404', 'noble', '24.04')
            }
          }
        }
        stage('Ubuntu 22.04 (Jammy)') {
          steps {
            script {
              createDebPackage('ubuntu2204', 'jammy', '22.04')
            }
          }
        }
      }
    }

    stage('Tag & Push') {
      steps {
        sh '''
        git config user.name "jenkins"
        git config user.email "cd@julio.al"
        git remote set-url origin https://$GITHUB_TOKEN@github.com/raweb-panel/agent.git
        git tag $NEXT_TAG
        git push origin $NEXT_TAG
        '''
      }
    }

    stage('Release to GitHub') {
      steps {
        sh '''
        gh release create $NEXT_TAG agent.tar.gz \
            raweb-agent_${VERSION}_debian12_amd64.deb \
            raweb-agent_${VERSION}_debian11_amd64.deb \
            raweb-agent_${VERSION}_ubuntu2404_amd64.deb \
            raweb-agent_${VERSION}_ubuntu2204_amd64.deb \
            --repo raweb-panel/agent \
            --title "$NEXT_TAG" \
            --notes "Automated release $NEXT_TAG

## Supported Distributions:
- Debian 12 (Bookworm)
- Debian 11 (Bullseye)
- Ubuntu 24.04 (Noble Numbat)
- Ubuntu 22.04 (Jammy Jellyfish)

## Installation:
For Debian/Ubuntu systems, you can install the agent using the following commands:
Add repository to your system:
- echo "deb [trusted=yes] https://repo.julio.al/ <distribution> main" | sudo tee /etc/apt/sources.list.d/raweb.list
- sudo apt update
- sudo apt install raweb-agent

Replace <distribution> with: bookworm, bullseye, noble, or jammy"
        '''
      }
    }

    stage('Upload DEB Packages to Repository') {
      parallel {
        stage('Upload Debian 12') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent_${VERSION}_debian12_amd64.deb" \
              -F "distribution=debian12" \
              https://repo.julio.al/upload/deb
            '''
          }
        }
        stage('Upload Debian 11') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent_${VERSION}_debian11_amd64.deb" \
              -F "distribution=debian11" \
              https://repo.julio.al/upload/deb
            '''
          }
        }
        stage('Upload Ubuntu 24.04') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent_${VERSION}_ubuntu2404_amd64.deb" \
              -F "distribution=ubuntu2404" \
              https://repo.julio.al/upload/deb
            '''
          }
        }
        stage('Upload Ubuntu 22.04') {
          steps {
            sh '''
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -F "file=@raweb-agent_${VERSION}_ubuntu2204_amd64.deb" \
              -F "distribution=ubuntu2204" \
              https://repo.julio.al/upload/deb
            '''
          }
        }
      }
    }
  }

  post {
    always {
      // Clean up
      sh 'rm -rf deb-package-*'
    }
    success {
      echo "Build completed successfully!"
      echo "DEB packages uploaded to https://repo.julio.al/upload/deb"
    }
    failure {
      echo "Build failed!"
    }
  }
}

def createDebPackage(distId, distName, distVersion) {
  sh """
  # Create package directory structure
  mkdir -p deb-package-${distId}/raweb-agent/DEBIAN
  mkdir -p deb-package-${distId}/raweb-agent/raweb/apps/agent
  mkdir -p deb-package-${distId}/raweb-agent/etc/systemd/system

  # Copy binary and config
  cp agent deb-package-${distId}/raweb-agent/raweb/apps/agent/
  cp config.json deb-package-${distId}/raweb-agent/raweb/apps/agent/

  # Make binary executable
  chmod +x deb-package-${distId}/raweb-agent/raweb/apps/agent/agent

  # Create systemd service file
  cat > deb-package-${distId}/raweb-agent/etc/systemd/system/raweb-agent.service << 'EOF'
[Unit]
Description=Raweb Panel Agent
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/raweb/apps/agent
ExecStart=/raweb/apps/agent/agent --config=/raweb/apps/agent/config.json
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

  # Create control file with distribution-specific info
  cat > deb-package-${distId}/raweb-agent/DEBIAN/control << EOF
Package: raweb-agent
Version: ${VERSION}
Section: utils
Priority: optional
Architecture: amd64
Maintainer: Raweb Panel <cd@julio.al>
Description: Raweb Panel Agent (${distName} ${distVersion})
 Agent for Raweb Panel management system
 Built for ${distName} ${distVersion}
EOF

  # Create postinst script
  cat > deb-package-${distId}/raweb-agent/DEBIAN/postinst << 'EOF'
#!/bin/bash
set -e

# Reload systemd and enable service
systemctl daemon-reload
systemctl enable raweb-agent.service

# Start service if not running
if ! systemctl is-active --quiet raweb-agent.service; then
    systemctl start raweb-agent.service
fi

echo "Raweb Agent installed and started successfully"
EOF

  # Create prerm script
  cat > deb-package-${distId}/raweb-agent/DEBIAN/prerm << 'EOF'
#!/bin/bash
set -e

# Stop and disable service before removal
if systemctl is-active --quiet raweb-agent.service; then
    systemctl stop raweb-agent.service
fi

if systemctl is-enabled --quiet raweb-agent.service; then
    systemctl disable raweb-agent.service
fi
EOF

  # Create postrm script
  cat > deb-package-${distId}/raweb-agent/DEBIAN/postrm << 'EOF'
#!/bin/bash
set -e

# Reload systemd after removal
systemctl daemon-reload

# Remove application directory if empty
if [ -d "/raweb/apps/agent" ] && [ -z "\$(ls -A /raweb/apps/agent)" ]; then
    rmdir /raweb/apps/agent
fi

if [ -d "/raweb/apps" ] && [ -z "\$(ls -A /raweb/apps)" ]; then
    rmdir /raweb/apps
fi

echo "Raweb Agent removed successfully"
EOF

  # Make scripts executable
  chmod +x deb-package-${distId}/raweb-agent/DEBIAN/postinst
  chmod +x deb-package-${distId}/raweb-agent/DEBIAN/prerm
  chmod +x deb-package-${distId}/raweb-agent/DEBIAN/postrm

  # Build the package
  dpkg-deb --build deb-package-${distId}/raweb-agent
  mv deb-package-${distId}/raweb-agent.deb raweb-agent_${VERSION}_${distId}_amd64.deb
  """
}
